{"ast":null,"code":"var _jsxFileName = \"/usr/local/bin/React/clothing/ClothingSite/src/context/user.context.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext } from 'react';\nimport { useState, useEffect } from 'react';\nimport { onAuthStateChangedListener, createUserDocumentFromAuth } from '../utils/firebase.util';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const userContext = /*#__PURE__*/createContext({\n  currentUser: null,\n  setCurrentUser: () => null\n});\nexport const UserProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [currentUser, setCurrentUser] = useState(null);\n  const value = {\n    currentUser,\n    setCurrentUser\n  };\n  useEffect(() => {\n    const unsubscribe = onAuthStateChangedListener(user => {\n      if (user) {\n        createUserDocumentFromAuth(user);\n      }\n\n      setCurrentUser(user);\n    });\n    return unsubscribe; //This is a function which ends the listener to run all the run.It is essential to invoke this to free  memory or else it will keep on Listening to the state changes\n  }, []);\n  return /*#__PURE__*/_jsxDEV(userContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 10\n  }, this);\n};\n\n_s(UserProvider, \"Y5F2pQQk2LZA5WRO2+bvRm5iRuo=\");\n\n_c = UserProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","onAuthStateChangedListener","createUserDocumentFromAuth","userContext","currentUser","setCurrentUser","UserProvider","children","value","unsubscribe","user"],"sources":["/usr/local/bin/React/clothing/ClothingSite/src/context/user.context.jsx"],"sourcesContent":["import { createContext } from 'react'\nimport { useState, useEffect } from 'react'\nimport {\n  onAuthStateChangedListener,\n  createUserDocumentFromAuth,\n} from '../utils/firebase.util'\nexport const userContext = createContext({\n  currentUser: null,\n  setCurrentUser: () => null,\n})\n\nexport const UserProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null)\n  const value = { currentUser, setCurrentUser }\n  useEffect(() => {\n    const unsubscribe = onAuthStateChangedListener((user) => {\n      if (user) {\n        createUserDocumentFromAuth(user)\n      }\n      setCurrentUser(user)\n    })\n    return unsubscribe //This is a function which ends the listener to run all the run.It is essential to invoke this to free  memory or else it will keep on Listening to the state changes\n  }, [])\n  return <userContext.Provider value={value}>{children}</userContext.Provider>\n}\n"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,OAA9B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SACEC,0BADF,EAEEC,0BAFF,QAGO,wBAHP;;AAIA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC;EACvCM,WAAW,EAAE,IAD0B;EAEvCC,cAAc,EAAE,MAAM;AAFiB,CAAD,CAAjC;AAKP,OAAO,MAAMC,YAAY,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC5C,MAAM,CAACH,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,IAAD,CAA9C;EACA,MAAMS,KAAK,GAAG;IAAEJ,WAAF;IAAeC;EAAf,CAAd;EACAL,SAAS,CAAC,MAAM;IACd,MAAMS,WAAW,GAAGR,0BAA0B,CAAES,IAAD,IAAU;MACvD,IAAIA,IAAJ,EAAU;QACRR,0BAA0B,CAACQ,IAAD,CAA1B;MACD;;MACDL,cAAc,CAACK,IAAD,CAAd;IACD,CAL6C,CAA9C;IAMA,OAAOD,WAAP,CAPc,CAOK;EACpB,CARQ,EAQN,EARM,CAAT;EASA,oBAAO,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAED,KAA7B;IAAA,UAAqCD;EAArC;IAAA;IAAA;IAAA;EAAA,QAAP;AACD,CAbM;;GAAMD,Y;;KAAAA,Y"},"metadata":{},"sourceType":"module"}